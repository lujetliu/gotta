package main

/*
	垃圾收集器
	编程语言的内存管理系统除负责堆内存的分配外, 还负责回收不再使用的对象和
	内存空间, 这部分工作由垃圾收集器完成; 在几乎所有现代编程语言中, 垃圾
	收集器都是一个复杂的系统, 需要花费很多精力学习;


	c, c++ 和 rust 等编程语言使用手动方式管理内存, 程序员需要主动申请内存
	或者释放内存; 而 python, ruby, java 和 go 等语言使用自动内存管理系统,
	一般是垃圾收集机制, 不过 Object-C 选择了自动引用计数, 引用计数也是属
	于自动内存管理机制;

	在垃圾收集的时候需要进行STW(Stop the World)暂停程序(TODO)
	随着用户程序申请越来越多的内存, 系统中的垃圾会逐渐增多; 当程序的内存占用
	达到一定阈值时, 整个应用程序就会暂停, 垃圾收集器会扫描分配的所有对象并
	回收不再使用的内存空间, 当这个过程结束后, 用户程序才可以继续执行;

	用户程序会通过内存分配器在堆中申请内存, 而垃圾收集器负责回收堆中的内存
	空间, 内存分配器和垃圾收集器共同管理程序中的堆内存空间;
*/

/*
	标记清除(mark-sweep)
	标记清除算法是最常见的垃圾回收算法, 标记清除算法是跟踪式垃圾收集器, 其
	执行过程可以分为标记(mark)和清除(sweep)两个阶段:
	- 标记阶段: 从根对象出发查找并标记堆中所有存活的对象;
	- 清除阶段: 遍历堆中的全部对象, 回收未被标记的垃圾对象并将回收的内存
		加入空闲链表;(TODO: 源码)
*/
