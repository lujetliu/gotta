package main

/*
	调度器
	线程是操作系统调度的最小单元, 而 Linux 调度器并不区分进程和线程的调度, 它
	们在不同的操作系统上的实现也不同, 大多数实现中线程属于进程;

	多个线程可以属于同一个进程并共享内存空间, 因为多线程不需要创建新的虚拟内存
	空间(TODO), 所以不需要内存管理单元处理上下文的切换, 线程之间的通信也正是基
	于共享内存进行的, 与重量级进程相比, 线程显得比较轻量;

	虽然线程比较轻量, 但是调度时也有比较大的额外开销, 每个线程都占用 1MB 以上
	的内存空间, 在切换线程时不止会消耗较多内存, 恢复寄存器中的内容还需要向
	操作系统申请或销毁资源; 每一次线程上下文的切换都需要消耗约1us的时间, 而
	go 调度器对 goroutine 的上下文切换约为 0.2us, 减少了 80% 的额外开销;

	go 语言的调度器使用与 cpu 数量相等的线程来减少线程频繁切换带来的内存开销,
	同时在每个线程上执行额外开销更低的 goroutine 来降低操作系统和硬件的负载;

	在 1.12 之前的调度器有 G-M 模型组成:

	                                       全局 goroutine 队列
							-------------------------------------------------
			      加锁      |     G1              G2				G3      |
				/    |\	    -------------------------------------------------
               /     |
			  /      |
		放入 /       | 放回
            /       /
		   |       /
		   \      /
		    \|   /
	          M1                 M2             M3

	缺陷:
		- 调度器和锁是全局资源, 所有调度状态都是中心化存储的, 锁竞争问题严重
		- 线程需要经常互相传递可运行的 goroutine, 引入了大量延迟

*/
