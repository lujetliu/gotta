package main

/* 机器码生成---汇编器*/
/*
 * 在 ./ssa.go 中 SSA 阶段, 编译器先执行与特定指令集无关的优化, 再执行与特定
 * 指令集有关的优化, 并最终生成与特定指令集有关的指令和寄存器分配方式;
 * 在 $GOROOT/src/cmd/compile/internal/ssa/gen/AMD64Ops.go 中, 包含了和 AMD64
 * 指令集相关的操作.
 *
 */

// 在 SSA lower 阶段之后, 就开始执行与特定指令集有关的重写与优化, 在 genssa
// 阶段, 编译器会生成与单个指令对应的
// $GOROOT/src/cmd/internal/obj/link.go 中的 Prog 结构.
// type Prog struct {
// 	From  Addr
// 	To    Addr
// 	As    As
// 	Pcond *Prog
// }
// 如最终生成的指令 MOVL R1, R2 被 Prog 表示为 As=MOVL, From=R1, To=R2,
// Pcond 代表跳转指令, 除此之外, 还有一些与特定指令集相关的结构.

/*
 * 在 SSA 后, 编译器将调用与特定指令集有关的汇编器(Assembler) 生成 obj 文件,
 * obj 文件作为链接器(Linker) 的输入, 生成二进制可执行文件;
 * $GOROOT/src/cmd/internal/obj 目录中包含了汇编与链接的核心逻辑, 内部有许多
 * 与机器码生成相关的包; 不同类型的指令集(amd64, arm64, mips64等)需要使用不同
 * 的包生成, go 语言目前能在所有常见的 cpu 指令集类型上编译运行.
 *
 * 汇编和链接是编译器后端与特定指令集有关的阶段, 由于历史原因, go 语言的汇编器
 * 基于了不常见的 plan9 汇编器(TODO)的输入形式; 输入汇编器中的汇编指令不是机器
 * 码的表现形式, 其仍然是人类可读的底层抽象; 在 go 的 runtime 及 math/big 标准
 * 库里, 可以看到许多特定指令集的汇编代码, go 语言也提供了一些方式用于查看编译
 * 器生成的汇编代码.
 */
import "fmt"

func main() {
	fmt.Println(123)
}

// go tool compile -S main.go
// 输出: (FUNCDATA, PCDATA 是与垃圾回收相关的操作), TODO
// os.(*File).close STEXT dupok nosplit size=26 args=0x18 locals=0x0
// 	0x0000 00000 (<autogenerated>:1)	TEXT	os.(*File).close(SB), DUPOK|NOSPLIT|ABIInternal, $0-24
// 	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$0, gclocals·e6397a44f8e1b6e77d0f200b4fba5269(SB)
// 	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$1, gclocals·69c1753bd5f81501d95132d08af04464(SB)
// 	0x0000 00000 (<autogenerated>:1)	MOVQ	""..this+8(SP), AX
// 	0x0005 00005 (<autogenerated>:1)	MOVQ	(AX), AX
// 	0x0008 00008 (<autogenerated>:1)	MOVQ	AX, ""..this+8(SP)
// 	0x000d 00013 (<autogenerated>:1)	XORPS	X0, X0
// 	0x0010 00016 (<autogenerated>:1)	MOVUPS	X0, "".~r0+16(SP)
// 	0x0015 00021 (<autogenerated>:1)	JMP	os.(*file).close(SB)
// 	0x0000 48 8b 44 24 08 48 8b 00 48 89 44 24 08 0f 57 c0  H.D$.H..H.D$..W.
// 	0x0010 0f 11 44 24 10 e9 00 00 00 00                    ..D$......
// 	rel 22+4 t=8 os.(*file).close+0
/*
 * 这段汇编代码显示了 main 函数栈帧的大小与代码的行号及其对应的汇编指令,
 * 其中 $88-0 表明了栈帧的大小和函数参数的大小.(TODO)
 */
// "".main STEXT size=138 args=0x0 locals=0x58
// 	0x0000 00000 (assembler.go:39)	TEXT	"".main(SB), ABIInternal, $88-0
// 	0x0000 00000 (assembler.go:39)	MOVQ	(TLS), CX
// 	0x0009 00009 (assembler.go:39)	CMPQ	SP, 16(CX)
// 	0x000d 00013 (assembler.go:39)	PCDATA	$0, $-2
// 	0x000d 00013 (assembler.go:39)	JLS	128
// 	0x000f 00015 (assembler.go:39)	PCDATA	$0, $-1
// 	0x000f 00015 (assembler.go:39)	SUBQ	$88, SP
// 	0x0013 00019 (assembler.go:39)	MOVQ	BP, 80(SP)
// 	0x0018 00024 (assembler.go:39)	LEAQ	80(SP), BP
// 	0x001d 00029 (assembler.go:39)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
// 	0x001d 00029 (assembler.go:39)	FUNCDATA	$1, gclocals·f207267fbf96a0178e8758c6e3e0ce28(SB)
// 	0x001d 00029 (assembler.go:39)	FUNCDATA	$3, "".main.stkobj(SB)
// 	0x001d 00029 (assembler.go:40)	XORPS	X0, X0
// 	0x0020 00032 (assembler.go:40)	MOVUPS	X0, ""..autotmp_11+64(SP)
// 	0x0025 00037 (assembler.go:40)	LEAQ	type.int(SB), AX
// 	0x002c 00044 (assembler.go:40)	MOVQ	AX, ""..autotmp_11+64(SP)
// 	0x0031 00049 (assembler.go:40)	LEAQ	""..stmp_0(SB), AX
// 	0x0038 00056 (assembler.go:40)	MOVQ	AX, ""..autotmp_11+72(SP)
// 	0x003d 00061 (<unknown line number>)	NOP
// 	0x003d 00061 ($GOROOT/src/fmt/print.go:274)	MOVQ	os.Stdout(SB), AX
// 	0x0044 00068 ($GOROOT/src/fmt/print.go:274)	LEAQ	go.itab.*os.File,io.Writer(SB), CX
// 	0x004b 00075 ($GOROOT/src/fmt/print.go:274)	MOVQ	CX, (SP)
// 	0x004f 00079 ($GOROOT/src/fmt/print.go:274)	MOVQ	AX, 8(SP)
// 	0x0054 00084 ($GOROOT/src/fmt/print.go:274)	LEAQ	""..autotmp_11+64(SP), AX
// 	0x0059 00089 ($GOROOT/src/fmt/print.go:274)	MOVQ	AX, 16(SP)
// 	0x005e 00094 ($GOROOT/src/fmt/print.go:274)	MOVQ	$1, 24(SP)
// 	0x0067 00103 ($GOROOT/src/fmt/print.go:274)	MOVQ	$1, 32(SP)
// 	0x0070 00112 ($GOROOT/src/fmt/print.go:274)	PCDATA	$1, $0
// 	0x0070 00112 ($GOROOT/src/fmt/print.go:274)	CALL	fmt.Fprintln(SB)
// 	0x0075 00117 (assembler.go:40)	MOVQ	80(SP), BP
// 	0x007a 00122 (assembler.go:40)	ADDQ	$88, SP
// 	0x007e 00126 (assembler.go:40)	RET
// 	0x007f 00127 (assembler.go:40)	NOP
// 	0x007f 00127 (assembler.go:39)	PCDATA	$1, $-1
// 	0x007f 00127 (assembler.go:39)	PCDATA	$0, $-2
// 	0x007f 00127 (assembler.go:39)	NOP
// 	0x0080 00128 (assembler.go:39)	CALL	runtime.morestack_noctxt(SB)
// 	0x0085 00133 (assembler.go:39)	PCDATA	$0, $-1
// 	0x0085 00133 (assembler.go:39)	JMP	0
// 	0x0000 64 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 71 48  dH..%....H;a.vqH
// 	0x0010 83 ec 58 48 89 6c 24 50 48 8d 6c 24 50 0f 57 c0  ..XH.l$PH.l$P.W.
// 	0x0020 0f 11 44 24 40 48 8d 05 00 00 00 00 48 89 44 24  ..D$@H......H.D$
// 	0x0030 40 48 8d 05 00 00 00 00 48 89 44 24 48 48 8b 05  @H......H.D$HH..
// 	0x0040 00 00 00 00 48 8d 0d 00 00 00 00 48 89 0c 24 48  ....H......H..$H
// 	0x0050 89 44 24 08 48 8d 44 24 40 48 89 44 24 10 48 c7  .D$.H.D$@H.D$.H.
// 	0x0060 44 24 18 01 00 00 00 48 c7 44 24 20 01 00 00 00  D$.....H.D$ ....
// 	0x0070 e8 00 00 00 00 48 8b 6c 24 50 48 83 c4 58 c3 90  .....H.l$PH..X..
// 	0x0080 e8 00 00 00 00 e9 76 ff ff ff                    ......v...
// 	rel 5+4 t=17 TLS+0
// 	rel 40+4 t=16 type.int+0
// 	rel 52+4 t=16 ""..stmp_0+0
// 	rel 64+4 t=16 os.Stdout+0
// 	rel 71+4 t=16 go.itab.*os.File,io.Writer+0
// 	rel 113+4 t=8 fmt.Fprintln+0
// 	rel 129+4 t=8 runtime.morestack_noctxt+0
// go.cuinfo.packagename. SDWARFINFO dupok size=0
// 	0x0000 6d 61 69 6e                                      main
// go.info.fmt.Println$abstract SDWARFINFO dupok size=42
// 	0x0000 04 66 6d 74 2e 50 72 69 6e 74 6c 6e 00 01 01 11  .fmt.Println....
// 	0x0010 61 00 00 00 00 00 00 11 6e 00 01 00 00 00 00 11  a.......n.......
// 	0x0020 65 72 72 00 01 00 00 00 00 00                    err.......
// 	rel 0+0 t=24 type.[]interface {}+0
// 	rel 0+0 t=24 type.error+0
// 	rel 0+0 t=24 type.int+0
// 	rel 19+4 t=29 go.info.[]interface {}+0
// 	rel 27+4 t=29 go.info.int+0
// 	rel 37+4 t=29 go.info.error+0
// runtime.nilinterequal·f SRODATA dupok size=8
// 	0x0000 00 00 00 00 00 00 00 00                          ........
// 	rel 0+8 t=1 runtime.nilinterequal+0
// runtime.memequal64·f SRODATA dupok size=8
// 	0x0000 00 00 00 00 00 00 00 00                          ........
// 	rel 0+8 t=1 runtime.memequal64+0
// runtime.gcbits.01 SRODATA dupok size=1
// 	0x0000 01                                               .
// type..namedata.*interface {}- SRODATA dupok size=16
// 	0x0000 00 00 0d 2a 69 6e 74 65 72 66 61 63 65 20 7b 7d  ...*interface {}
// type.*interface {} SRODATA dupok size=56
// 	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
// 	0x0010 4f 0f 96 9d 08 08 08 36 00 00 00 00 00 00 00 00  O......6........
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00                          ........
// 	rel 24+8 t=1 runtime.memequal64·f+0
// 	rel 32+8 t=1 runtime.gcbits.01+0
// 	rel 40+4 t=5 type..namedata.*interface {}-+0
// 	rel 48+8 t=1 type.interface {}+0
// runtime.gcbits.02 SRODATA dupok size=1
// 	0x0000 02                                               .
// type.interface {} SRODATA dupok size=80
// 	0x0000 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
// 	0x0010 e7 57 a0 18 02 08 08 14 00 00 00 00 00 00 00 00  .W..............
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	rel 24+8 t=1 runtime.nilinterequal·f+0
// 	rel 32+8 t=1 runtime.gcbits.02+0
// 	rel 40+4 t=5 type..namedata.*interface {}-+0
// 	rel 44+4 t=6 type.*interface {}+0
// 	rel 56+8 t=1 type.interface {}+80
// type..namedata.*[]interface {}- SRODATA dupok size=18
// 	0x0000 00 00 0f 2a 5b 5d 69 6e 74 65 72 66 61 63 65 20  ...*[]interface
// 	0x0010 7b 7d                                            {}
// type.*[]interface {} SRODATA dupok size=56
// 	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
// 	0x0010 f3 04 9a e7 08 08 08 36 00 00 00 00 00 00 00 00  .......6........
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00                          ........
// 	rel 24+8 t=1 runtime.memequal64·f+0
// 	rel 32+8 t=1 runtime.gcbits.01+0
// 	rel 40+4 t=5 type..namedata.*[]interface {}-+0
// 	rel 48+8 t=1 type.[]interface {}+0
// type.[]interface {} SRODATA dupok size=56
// 	0x0000 18 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
// 	0x0010 70 93 ea 2f 02 08 08 17 00 00 00 00 00 00 00 00  p../............
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00                          ........
// 	rel 32+8 t=1 runtime.gcbits.01+0
// 	rel 40+4 t=5 type..namedata.*[]interface {}-+0
// 	rel 44+4 t=6 type.*[]interface {}+0
// 	rel 48+8 t=1 type.interface {}+0
// type..namedata.*[1]interface {}- SRODATA dupok size=19
// 	0x0000 00 00 10 2a 5b 31 5d 69 6e 74 65 72 66 61 63 65  ...*[1]interface
// 	0x0010 20 7b 7d                                          {}
// type.*[1]interface {} SRODATA dupok size=56
// 	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
// 	0x0010 bf 03 a8 35 08 08 08 36 00 00 00 00 00 00 00 00  ...5...6........
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00                          ........
// 	rel 24+8 t=1 runtime.memequal64·f+0
// 	rel 32+8 t=1 runtime.gcbits.01+0
// 	rel 40+4 t=5 type..namedata.*[1]interface {}-+0
// 	rel 48+8 t=1 type.[1]interface {}+0
// type.[1]interface {} SRODATA dupok size=72
// 	0x0000 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
// 	0x0010 50 91 5b fa 02 08 08 11 00 00 00 00 00 00 00 00  P.[.............
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0040 01 00 00 00 00 00 00 00                          ........
// 	rel 24+8 t=1 runtime.nilinterequal·f+0
// 	rel 32+8 t=1 runtime.gcbits.02+0
// 	rel 40+4 t=5 type..namedata.*[1]interface {}-+0
// 	rel 44+4 t=6 type.*[1]interface {}+0
// 	rel 48+8 t=1 type.interface {}+0
// 	rel 56+8 t=1 type.[]interface {}+0
// ""..inittask SNOPTRDATA size=32
// 	0x0000 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
// 	0x0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	rel 24+8 t=1 fmt..inittask+0
// ""..stmp_0 SRODATA size=8
// 	0x0000 7b 00 00 00 00 00 00 00                          {.......
// go.itab.*os.File,io.Writer SRODATA dupok size=32
// 	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0010 44 b5 f3 33 00 00 00 00 00 00 00 00 00 00 00 00  D..3............
// 	rel 0+8 t=1 type.io.Writer+0
// 	rel 8+8 t=1 type.*os.File+0
// 	rel 24+8 t=1 os.(*File).Write+0
// go.itablink.*os.File,io.Writer SRODATA dupok size=8
// 	0x0000 00 00 00 00 00 00 00 00                          ........
// 	rel 0+8 t=1 go.itab.*os.File,io.Writer+0
// type..importpath.fmt. SRODATA dupok size=6
// 	0x0000 00 00 03 66 6d 74                                ...fmt
// gclocals·e6397a44f8e1b6e77d0f200b4fba5269 SRODATA dupok size=10
// 	0x0000 02 00 00 00 03 00 00 00 01 00                    ..........
// gclocals·69c1753bd5f81501d95132d08af04464 SRODATA dupok size=8
// 	0x0000 02 00 00 00 00 00 00 00                          ........
// gclocals·33cdeccccebe80329f1fdbee7f5874cb SRODATA dupok size=8
// 	0x0000 01 00 00 00 00 00 00 00                          ........
// gclocals·f207267fbf96a0178e8758c6e3e0ce28 SRODATA dupok size=9
// 	0x0000 01 00 00 00 02 00 00 00 00                       .........
// "".main.stkobj SRODATA size=24
// 	0x0000 01 00 00 00 00 00 00 00 f0 ff ff ff ff ff ff ff  ................
// 	0x0010 00 00 00 00 00 00 00 00                          ........
// 	rel 16+8 t=1 type.[1]interface {}+0
