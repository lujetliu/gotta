package main

/*
	一切皆组合是 go 语言的设计哲学

	在语言设计层面, Go提供了诸多正交(TODO)的语法元素供后续组合使用:
	- Go语言无类型体系(type hierarchy), 类型定义正交独立
	- 方法和类型是正交的, 每种类型都可以拥有自己的方法集合
	- 接口与其实现者之间无显式关联

	正交性为"组合"哲学的落地提供了前提, 而组合是Go程序内各组件间的主要耦合
	方式, 也是搭建Go程序静态结构的主要方式;
	Go语言中主要有两种组合方式:
	- 垂直组合(类型组合)
		Go语言主要通过类型嵌入机制实现垂直组合, 进而实现方法实现的复用、
		接口定义重用等;
	- 水平组合
		通常Go程序以接口类型变量作为程序水平组合的连接点, 接口是水平组合
		的关键, 好比程序肌体上的关节, 给予连接关节的两个部分或多个部分各
		自自由活动的能力, 而整体又实现了某种功能;

	以接口为连接点的水平组合方式可以将各个垂直组合出的类型耦合在一起, 从而
	编织出程序静态骨架; 而通过接口进行水平组合的一种常见模式是使用接受接口
	类型参数的函数或方法;


	水平组合的几种惯用形式:
	- 包裹函数 ./wrapper.go
	- 适配器函数 ./adapter.go
	- 中间件 ./middleware.go
*/
