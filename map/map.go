package main

/*
 go 语言中的 map 被称为哈希表, 是使用频率极高的一种数据结构, 哈希表的原理是
 将多个键值(key/value)对分散存储在 buckets(桶)中, 给定一个键(key), 哈希(Hash)
 算法会计算出键值对存储的位置, 通常保罗两步, 伪代码如下:
 hash = hashfunc(key)   // 计算键的哈希值, 结果与桶的数量无关
 index = hash % array_size // 通过取模运算得到 0-array_size 之间的 index 序号(TODO)

 TODO: 查找速度的比较
 实践中, 通常将 map 看做是 o(1) 时间复杂度的操作, 通过一个键快速寻找其唯一的
 对应的值(value); 在许多情况下, 哈希表的查找速度明显快于一些搜索树形式的数据
 结构, 被广泛用于关联数组, 缓存, 数据库缓存等场景.


 哈希碰撞及解决方法:
 哈希碰撞(Hash Collision), 即不同的键通过哈希函数可能产生相同的哈希值, 如果将
 2450 个键随机分配到一百万个桶中，则根据概率计算至少有两个键被分配到同一个桶
 中的可能性有 95%; 哈希碰撞导致同一个桶中可能存在多个元素, 有多种方式避免哈希
 碰撞, 两种主要的策略: 拉链法及开放寻址法(TODO)
 -拉链法: 随着桶中元素的增加, 可以不断链接新的元素, 同时不用预先为元素分配内存;
	拉链法的不足之处在于, 需要存储额外的指针用于链接元素, 增加了整个哈希表的大小,
	同时由于链表存储的地址不连续, 所以无法高效利用 cpu 高速缓存.
 - 开放寻址法(Open Addressing): 所有元素都存储在数组中, 当必须插入新条目时, 将
    按某种探测策略操作, 直到找到未使用的数组插槽为止; 当搜索元素时, 将按相同顺
	序扫描存储桶, 直到查找到目标记录或找到未使用的插槽为止.
*/
