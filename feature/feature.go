package main

/*
	现今大多数编程语言往往有着相近的编程范式和方法论, 但它们在具体的实现上会有些
	许不同, 如果能够抓住编程语言中那些“独特的”特性, 就可以领会编程语言在设计上
	做的一系列权衡.

	本节介绍 go 中三个特性(函数调用, 接口和反射), 其中涉及到栈, 堆和内存等相关
	知识, 以及一些常见的使用场景; 使得更好的理解编程语言本身.

	调用惯例:
		无论是系统级编程语言c和go, 还是 ruby 和 python 等脚本语言, 它们在调用
		函数时往往使用相同的语法;
		function(arg0, arg1)
		虽然它们的调用函数的语法很相似, 但是它们的调用惯例可能大不相同, 调用
		惯例是调用方对参数和返回值传递的约定

	c 的调用惯例, ./c
		总结: 在 x86_64 的机器上使用 c 语言的调用函数时, 参数都是通过寄存器和
		栈传递的, 其中:
		- 6 个及 6 个以下的参数会按照顺序分别使用 edi, esi, edx, ecx, r8d, r9d
			这6个寄存器传递;
		- 6 个以上的参数(7, 8, ...)会使用栈传递, 函数的参数会以从右向左的顺序
			存入栈中;

		而函数的返回值是通过 eax 寄存器进行传递的, 由于只使用一个寄存器存储
		返回值, 所有 c 语言的函数不能同时返回多个值.(TODO)

	go 的调用惯例, ./go
		总结: go 语言使用栈传递参数和接收返回值, 所有它只需要在栈上多分配一些
		内存就可以返回多个值.(TODO:c语言为什么不能在栈上多分配内存?)
*/
